import os
import pandas as pd
import google.generativeai as genai
from dotenv import load_dotenv
import streamlit as st
import time
import warnings

# Suprimir avisos espec√≠ficos
warnings.filterwarnings('ignore', category=UserWarning, message='.*value \d+\.\d+ is outside the limits for dates.*')

# Configura√ß√£o inicial
load_dotenv()

GOOGLE_API_KEY = 'AIzaSyBh3w-eU2MMjVX8cUOkl1UQhd01Ehsa-Ew'
if not GOOGLE_API_KEY:
    raise ValueError("Por favor, defina a vari√°vel de ambiente GOOGLE_API_KEY")

genai.configure(api_key=GOOGLE_API_KEY)

# Configura√ß√£o do modelo
generation_config = {
    "temperature": 0.5,
    "top_p": 1,
    "top_k": 1,
    "max_output_tokens": 1000000,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

def load_model():
    return genai.GenerativeModel(
        model_name="gemini-2.5-pro-exp-03-25",
        generation_config=generation_config,
        safety_settings=safety_settings
    )

model = load_model()
# Fun√ß√£o para carregar dados com tratamento de erros
st.cache_data()
def carregar_dados(caminho_arquivo):
    try:
        # Configurar pandas para ignorar avisos de datas
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=UserWarning)

            # Tentar ler o arquivo com engine openpyxl que lida melhor com formatos
            try:
                todas_planilhas = pd.read_excel(caminho_arquivo, sheet_name=None, engine='openpyxl')
            except:
                # Se falhar, tentar com engine padr√£o
                todas_planilhas = pd.read_excel(caminho_arquivo, sheet_name=None)

            dados_processados = {}

            for nome_planilha, dados in todas_planilhas.items():
                # Corrigir codifica√ß√£o
                dados.columns = dados.columns.str.replace('√É¬ß', '√ß')
                dados.columns = dados.columns.str.replace('√É¬£', '√£')
                dados.columns = dados.columns.str.replace('√É¬°', '√°')
                dados.columns = dados.columns.str.replace('√É¬©', '√©')
                dados.columns = dados.columns.str.replace('√É¬∫', '√∫')
                dados.columns = dados.columns.str.replace('√É', '√≠')
                dados.columns = dados.columns.str.replace('√Ç', '')

                # Converter colunas de data se necess√°rio
                for col in dados.columns:
                    if 'data' in col.lower() or 'date' in col.lower():
                        try:
                            dados[col] = pd.to_datetime(dados[col], errors='coerce')
                        except:
                            pass

                dados_processados[nome_planilha] = dados

            return dados_processados
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {str(e)}")
        return None

rota_arquivo = r"C:\Users\victo\Downloads\Base de Dados Agente IA EGEPI (1).xlsx"
# [Mantenha todas as importa√ß√µes e configura√ß√µes iniciais como est√£o...]

# Inicializa√ß√£o do Streamlit
st.set_page_config(page_title="Agente I.A de Consultas em Cursos", page_icon=":books:")
senha_usuario = 'egepi1@1'

# Sidebar com configura√ß√µes
with st.sidebar:
    st.title("Configura√ß√µes")
    # senha = st.text_input('Digite a senha')

    # if st.button("Carregar Dados") and senha_usuario == senha:
    with st.spinner("Carregando dados..."):
        st.session_state.todas_planilhas = carregar_dados(rota_arquivo)
        if st.session_state.todas_planilhas is not None:
            st.success("Dados carregados com sucesso!")

            # Prepara a string com informa√ß√µes de todas as planilhas
            dados_str = ""
            for nome_planilha, dados in st.session_state.todas_planilhas.items():
                dados_str += f"\n\n=== Dados da planilha '{nome_planilha}' ===\n"
                dados_str += dados.head(1000).to_string()

            # Inicializa o hist√≥rico da conversa (para o modelo Gemini)
            st.session_state.historico_gemini = [
                {
                    "role": "user",
                    "parts": [f"""Voc√™ √© um assistente especializado em responder perguntas sobre inscri√ß√µes em cursos. 
                    Use apenas as informa√ß√µes da base de dados fornecida. Se n√£o souber a resposta, diga que n√£o tem informa√ß√µes suficientes.

                    Aqui est√° um exemplo da estrutura dos dados de todas as planilhas:
                    {dados_str}

                    As principais planilhas e suas colunas s√£o:

                    Planilha 1 (Dados dos Cursos):
                    id_curso: C√≥digo √∫nico do evento.
                    data_inicio: Data de in√≠cio do curso.
                    data_fim: Data de t√©rmino do curso.
                    evento: Nome do curso/evento.
                    numero_processo_SEI: N√∫mero do processo no SEI.
                    formato: Abordagem pedag√≥gica.
                    eixo: √Årea tem√°tica do curso.
                    local_realizacao: Local f√≠sico ou virtual do evento.
                    instrutor: Nome(s) do(s) instrutor(es).
                    valor_instrutor: Valor total pago ao(s) instrutor(es).
                    carga_horaria_instrutor: Horas dedicadas por instrutor (ordem igual √† "instrutor") Exemplo: Ex: 8, 12 (Joselito: 8h, Alexandre: 12h).
                    valor_material: Custo de materiais did√°ticos.
                    turno: Per√≠odo de realiza√ß√£o.
                    carga_horaria: Dura√ß√£o total do curso.
                    gerencia: Ger√™ncia respons√°vel.

                    Planilha 2 (Dados dos Participantes):
                    - [lista de colunas importantes]
                    - [outras colunas relevantes...]

                    Planilha 2 (Dados dos Org√£os):
                    - [lista de colunas importantes]
                    - [outras colunas relevantes...]

                    IMPORTANTE: 
                    1. Nunca revele informa√ß√µes pessoais completas como CPF ou e-mail. 
                    2. Consulte os dados de todas as planilhas para responder perguntas.
                    3. Se precisar cruzar informa√ß√µes entre planilhas, fa√ßa isso cuidadosamente.
                    4. Se precisar se referir a uma pessoa, use apenas o primeiro nome ou iniciais."""]
                },
                {
                    "role": "model",
                    "parts": [
                        "Entendido! Sou um assistente especializado em consultas sobre inscri√ß√µes em cursos. Posso ajudar com informa√ß√µes sobre participantes, cursos, status de inscri√ß√£o e outras informa√ß√µes relevantes da base de dados, sempre protegendo dados pessoais. Como posso ajudar?"]
                }
            ]

            # Inicializa as mensagens do chat (para exibi√ß√£o na interface)
            if "messages" not in st.session_state:
                st.session_state.messages = [
                    {"role": "assistant", "content": "Dados carregados com sucesso! Como posso ajudar voc√™ hoje?"}
                ]

# T√≠tulo da aplica√ß√£o
st.title("üí¨ Agente de I.A de Consultas em Cursos")
st.caption("üöÄ Um assistente virtual para responder perguntas sobre inscri√ß√µes em cursos")

# Exibe todas as mensagens do chat (hist√≥rico completo)
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input do usu√°rio
if prompt := st.chat_input("Digite sua pergunta sobre cursos"):
    # Verifica se os dados foram carregados
    if "todas_planilhas" not in st.session_state:
        with st.chat_message("assistant"):
            st.error("Por favor, carregue os dados na barra lateral primeiro.")
        st.stop()

    # Adiciona a mensagem do usu√°rio ao chat
    with st.chat_message("user"):
        st.markdown(prompt)

    # Adiciona a mensagem ao hist√≥rico de exibi√ß√£o
    st.session_state.messages.append({"role": "user", "content": prompt})

    # Adiciona a pergunta ao hist√≥rico do modelo Gemini
    st.session_state.historico_gemini.append({"role": "user", "parts": [prompt]})

    # Resposta do assistente
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        full_response = ""

        try:
            # Envia o hist√≥rico completo para o modelo
            with st.spinner("Pensando..."):
                resposta = model.generate_content(st.session_state.historico_gemini)

            # Adiciona a resposta ao hist√≥rico do Gemini
            resposta_texto = resposta.text
            st.session_state.historico_gemini.append({"role": "model", "parts": [resposta_texto]})

            # Simula digita√ß√£o
            for chunk in resposta_texto.split():
                full_response += chunk + " "
                time.sleep(0.05)
                message_placeholder.markdown(full_response + "‚ñå")
            message_placeholder.markdown(full_response)

        except Exception as e:
            full_response = f"‚ö†Ô∏è Ocorreu um erro ao processar sua pergunta: {str(e)}"
            message_placeholder.markdown(full_response)

    # Adiciona a resposta ao hist√≥rico de exibi√ß√£o
    st.session_state.messages.append({"role": "assistant", "content": full_response})